{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"hfsynpy A package in development for high-frequency (HF) synthesis. This package will contain multiple classes for the synthesis of commonly used high-frequency (HF) components. Currently, only microstrip synthesis is supported. It should produce results identical to KiCad, as the same methods are used. The implemented equations are generally applicable up to 40\u202fGHz; however, use with caution. Always verify results with full-wave simulation tools. Overview The Microstrip class models and analyzes microstrip transmission lines for PCB design, supporting both synthesis (finding trace width for a target impedance) and analysis (computing electrical properties from geometry and material parameters). Usage Example from hfsynpy import Microstrip ms = Microstrip( eps_r=3.66, tand=0.0037, h=1.507e-3, t=35e-6, rough=0e-6, sigma=1/(1.72e-8), mur=1.0, murc=1.0, frequency=10e9, z0_target=50.0 ) ms.Synthesize() print(f\"Synthesized width: {ms.width * 1e3:.4f} mm\") print(f\"Effective permittivity: {ms.epsilon_eff:.4f}\") print(f\"Skin depth: {ms.skin_depth * 1e6:.4f} um\") print(f\"Conductor attenuation: {ms.atten_cond:.4f} dB/m\") print(f\"Dielectric attenuation: {ms.atten_diel:.4f} dB/m\") API Reference hfsynpy . Microstrip dataclass Description Microstrip transmission line model for PCB design. This class models and analyzes microstrip transmission lines, supporting both synthesis (finding trace width for a target impedance) and analysis (computing electrical properties from geometry and material parameters). Parameters Name Type Default Unit Description eps_r float 1.0 - Relative permittivity (dielectric constant) of the substrate. tand float 0.0 - Loss tangent of the substrate. h float 1e-3 m Height of the substrate. t float 0.0 m Thickness of the conductor. rough float 0.0 m Surface roughness of the conductor. sigma float 5.8e7 S/m Electrical conductivity of the conductor. mur float 1.0 - Relative permeability of the substrate. murc float 1.0 - Relative permeability of the conductor. frequency float 1.0 Hz Frequency of operation. z0_target float None \u03a9 Target characteristic impedance for synthesis. ang_l_target float None rad Target electrical length for synthesis. h_top float 1e20 m Height to top ground plane (very large for single ground plane). Output Parameters Name Type Unit (output) Description width float m Synthesized trace width. epsilon_eff float - Effective relative permittivity. skin_depth float m Skin depth of the conductor at the given frequency. atten_cond float dB/m Conductor attenuation per meter. atten_diel float dB/m Dielectric attenuation per meter. Analyze Computes all output properties for the current geometry and material parameters. Use this method to analyze a microstrip with given physical and material parameters and obtain impedance and other properties. Synthesize Synthesizes the trace width for the target impedance and computes all output properties. This method finds the appropriate trace width for a given target impedance ( z0_target ) and updates all relevant electrical properties of the microstrip. Attribution This package is part of a Python translation of KiCad's C++ source code. Original C++ code: - \u00a9 2001 Gopal Narayanan gopal@astro.umass.edu - \u00a9 2002 Claudio Girardi claudio.girardi@ieee.org - \u00a9 2005, 2006 Stefan Jahn stefan@lkcc.org - Modified for KiCad: 2018 Jean-Pierre Charras - \u00a9 The KiCad Developers, see AUTHORS.txt for contributors. Python translation and modifications: - \u00a9 2025 Dominik Mair dominik.mair@uibk.ac.at This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.","title":"Home"},{"location":"#hfsynpy","text":"A package in development for high-frequency (HF) synthesis. This package will contain multiple classes for the synthesis of commonly used high-frequency (HF) components. Currently, only microstrip synthesis is supported. It should produce results identical to KiCad, as the same methods are used. The implemented equations are generally applicable up to 40\u202fGHz; however, use with caution. Always verify results with full-wave simulation tools.","title":"hfsynpy"},{"location":"#overview","text":"The Microstrip class models and analyzes microstrip transmission lines for PCB design, supporting both synthesis (finding trace width for a target impedance) and analysis (computing electrical properties from geometry and material parameters).","title":"Overview"},{"location":"#usage-example","text":"from hfsynpy import Microstrip ms = Microstrip( eps_r=3.66, tand=0.0037, h=1.507e-3, t=35e-6, rough=0e-6, sigma=1/(1.72e-8), mur=1.0, murc=1.0, frequency=10e9, z0_target=50.0 ) ms.Synthesize() print(f\"Synthesized width: {ms.width * 1e3:.4f} mm\") print(f\"Effective permittivity: {ms.epsilon_eff:.4f}\") print(f\"Skin depth: {ms.skin_depth * 1e6:.4f} um\") print(f\"Conductor attenuation: {ms.atten_cond:.4f} dB/m\") print(f\"Dielectric attenuation: {ms.atten_diel:.4f} dB/m\")","title":"Usage Example"},{"location":"#api-reference","text":"","title":"API Reference"},{"location":"#hfsynpy.Microstrip","text":"Description Microstrip transmission line model for PCB design. This class models and analyzes microstrip transmission lines, supporting both synthesis (finding trace width for a target impedance) and analysis (computing electrical properties from geometry and material parameters). Parameters Name Type Default Unit Description eps_r float 1.0 - Relative permittivity (dielectric constant) of the substrate. tand float 0.0 - Loss tangent of the substrate. h float 1e-3 m Height of the substrate. t float 0.0 m Thickness of the conductor. rough float 0.0 m Surface roughness of the conductor. sigma float 5.8e7 S/m Electrical conductivity of the conductor. mur float 1.0 - Relative permeability of the substrate. murc float 1.0 - Relative permeability of the conductor. frequency float 1.0 Hz Frequency of operation. z0_target float None \u03a9 Target characteristic impedance for synthesis. ang_l_target float None rad Target electrical length for synthesis. h_top float 1e20 m Height to top ground plane (very large for single ground plane). Output Parameters Name Type Unit (output) Description width float m Synthesized trace width. epsilon_eff float - Effective relative permittivity. skin_depth float m Skin depth of the conductor at the given frequency. atten_cond float dB/m Conductor attenuation per meter. atten_diel float dB/m Dielectric attenuation per meter.","title":"Microstrip"},{"location":"#hfsynpy.Microstrip.Analyze","text":"Computes all output properties for the current geometry and material parameters. Use this method to analyze a microstrip with given physical and material parameters and obtain impedance and other properties.","title":"Analyze"},{"location":"#hfsynpy.Microstrip.Synthesize","text":"Synthesizes the trace width for the target impedance and computes all output properties. This method finds the appropriate trace width for a given target impedance ( z0_target ) and updates all relevant electrical properties of the microstrip.","title":"Synthesize"},{"location":"#attribution","text":"This package is part of a Python translation of KiCad's C++ source code. Original C++ code: - \u00a9 2001 Gopal Narayanan gopal@astro.umass.edu - \u00a9 2002 Claudio Girardi claudio.girardi@ieee.org - \u00a9 2005, 2006 Stefan Jahn stefan@lkcc.org - Modified for KiCad: 2018 Jean-Pierre Charras - \u00a9 The KiCad Developers, see AUTHORS.txt for contributors. Python translation and modifications: - \u00a9 2025 Dominik Mair dominik.mair@uibk.ac.at This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.","title":"Attribution"}]}